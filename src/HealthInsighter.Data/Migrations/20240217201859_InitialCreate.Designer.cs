// <auto-generated />
using System;
using HealthInsighter.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HealthInsighter.Data.Migrations
{
    [DbContext(typeof(HealthInsighterDbContext))]
    [Migration("20240217201859_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HealthInsighter.Core.Models.AnalysisResult", b =>
                {
                    b.Property<Guid>("AnalysisResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("HealthEventId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("HealthRecordId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResultType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AnalysisResultId");

                    b.HasIndex("HealthEventId");

                    b.HasIndex("HealthRecordId");

                    b.ToTable("AnalysisResults");
                });

            modelBuilder.Entity("HealthInsighter.Core.Models.BloodSample", b =>
                {
                    b.Property<Guid>("BloodSampleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Metrics")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("BloodSampleId");

                    b.ToTable("BloodSamples");
                });

            modelBuilder.Entity("HealthInsighter.Core.Models.HealthEvent", b =>
                {
                    b.Property<Guid>("HealthEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("HealthEventId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("HealthEvents");
                });

            modelBuilder.Entity("HealthInsighter.Core.Models.HealthEventType", b =>
                {
                    b.Property<Guid>("EventTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EventTypeId");

                    b.ToTable("HealthEventTypes");
                });

            modelBuilder.Entity("HealthInsighter.Core.Models.HealthRecord", b =>
                {
                    b.Property<Guid>("HealthRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RecordType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("HealthRecordId");

                    b.HasIndex("Timestamp");

                    b.ToTable("HealthRecords");
                });

            modelBuilder.Entity("HealthInsighter.Core.Models.MeasurementType", b =>
                {
                    b.Property<Guid>("MeasurementTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MeasurementTypeId");

                    b.ToTable("MeasurementTypes");
                });

            modelBuilder.Entity("HealthInsighter.Core.Models.AnalysisResult", b =>
                {
                    b.HasOne("HealthInsighter.Core.Models.HealthEvent", "HealthEvent")
                        .WithMany()
                        .HasForeignKey("HealthEventId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HealthInsighter.Core.Models.HealthRecord", "HealthRecord")
                        .WithMany()
                        .HasForeignKey("HealthRecordId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("HealthEvent");

                    b.Navigation("HealthRecord");
                });

            modelBuilder.Entity("HealthInsighter.Core.Models.HealthEvent", b =>
                {
                    b.HasOne("HealthInsighter.Core.Models.HealthEventType", null)
                        .WithMany()
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
